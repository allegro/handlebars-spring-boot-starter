buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:6.0.0'
    }
}
plugins {
    id 'pmd'
    id 'jacoco'
    id 'com.github.spotbugs' version '6.0.23'
    id 'codenarc'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'java-library'
    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
    id 'nebula.optional-base' version '6.0.0'
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'pl.allegro.tech.build.axion-release' version '1.13.3'
}

scmVersion {
    tag { prefix = project.name + '-' }
    versionCreator 'versionWithBranch'
}
project.group = 'pl.allegro.tech.boot'
project.version = scmVersion.version

ext {
    jodaVersion = '2.13.0'
    spockVersion = '2.3-groovy-3.0'
    handlebarsVersion = '4.4.0'
    springBootVersion = '3.3.4'
}

allprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'groovy'
    sourceCompatibility = 17

    test {
        useJUnitPlatform()
    }
}
dependencies {
    api 'org.springframework.boot:spring-boot-starter-web:' + springBootVersion
    api 'com.github.jknack:handlebars-springmvc:' + handlebarsVersion
    api 'com.github.jknack:handlebars-guava-cache:' + handlebarsVersion

    api 'joda-time:joda-time:' + jodaVersion, optional
    api 'com.github.jknack:handlebars-helpers:' + handlebarsVersion, optional
    api 'com.github.jknack:handlebars-jackson:' + handlebarsVersion, optional
    api 'org.springframework.boot:spring-boot-configuration-processor:' + springBootVersion, optional

    testImplementation 'org.spockframework:spock-core:' + spockVersion,
                'org.spockframework:spock-spring:' + spockVersion,
                'org.springframework.boot:spring-boot-starter-test:' + springBootVersion
}
compileJava.dependsOn(processResources)

checkstyle { toolVersion = '10.12.4' }

codenarc {
    toolVersion = '3.5.0'
    configFile = new File("${projectDir}/config/codenarc/test-rules.groovy")
}

codenarcTest {
    ignoreFailures true
    compilationClasspath = codenarcMain.compilationClasspath + sourceSets.test.compileClasspath + sourceSets.test.output
}

pmd {
    rulesMinimumPriority.set(2)
    ruleSets = [
            "category/java/bestpractices.xml",
            "category/java/codestyle.xml",
            "category/java/design.xml",
            "category/java/errorprone.xml",
            "category/java/performance.xml"
    ]
}

spotbugsTest {
    spotbugsTest.enabled = false
}

jacocoTestReport {
    reports {
        xml
        html
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        sonatype(MavenPublication) {
            from components.java

            pom {
                name = 'Spring Boot Starter Handlebars'
                description = 'Spring Boot auto-configuration for Handlebars template engine'
                url = 'https://github.com/allegro/handlebars-spring-boot-starter'
                inceptionYear = '2015'
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "plesiecki"
                        name = "Pawe≈Ç Lesiecki"
                    }
                }
                scm {
                    connection = "scm:svn:http://subversion.example.com/svn/project/trunk/"
                    developerConnection = "scm:git@github.com:allegro/handlebars-spring-boot-starter.git"
                    url = "https://github.com/allegro/handlebars-spring-boot-starter"
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv("SONATYPE_USERNAME")
            password = System.getenv("SONATYPE_PASSWORD")
        }
    }
}

if (System.getenv("GPG_KEY_ID")) {
    signing {
        useInMemoryPgpKeys(
                System.getenv("GPG_KEY_ID"),
                System.getenv("GPG_PRIVATE_KEY"),
                System.getenv("GPG_PRIVATE_KEY_PASSWORD")
        )
        sign publishing.publications
    }
}
